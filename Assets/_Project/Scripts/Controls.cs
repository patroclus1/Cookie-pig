//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Project/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerGame"",
            ""id"": ""0932f18d-3274-4dd7-9cbc-b6467b8d7036"",
            ""actions"": [
                {
                    ""name"": ""MoveBody"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a29c86e2-fb05-4a32-a614-3b33324a6c8e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseLook"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3f416955-0fd6-4a57-a2a0-89646d4b280c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""dd61e1cd-4f25-44de-ad19-fad5a498ac01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CheckpointBind"",
                    ""type"": ""Button"",
                    ""id"": ""a315055d-94b3-4e59-89fa-15a9449d16b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1),Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlatformBind"",
                    ""type"": ""Button"",
                    ""id"": ""e3ddecd1-35d0-46ae-b33c-404089acad8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1),Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""30768041-311f-4a8b-bd21-00727d42c8b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""60a489cd-0c65-4c25-9d05-a68c6dea4f48"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""47b1dc70-625b-496c-bef7-757850271c2d"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBody"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""98d94456-c694-4f95-97d0-4e009cc5910a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&m"",
                    ""action"": ""MoveBody"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6157836f-d878-412d-b461-80ec280f8eea"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&m"",
                    ""action"": ""MoveBody"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1fb0e94d-935e-47cf-a527-cafb18effbd2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&m"",
                    ""action"": ""MoveBody"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""053e52b3-82b8-419e-8c5b-6e187b7b40e2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&m"",
                    ""action"": ""MoveBody"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""d2decaac-b128-468a-a07f-b35b8404ffa5"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBody"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3bfe58f4-ae5a-453e-9726-630c51cd2ea3"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&m"",
                    ""action"": ""MoveBody"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d0b52a41-0579-4973-822b-60f27db787e1"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&m"",
                    ""action"": ""MoveBody"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8923704c-ea58-4441-9e06-eb2da8a0a62a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&m"",
                    ""action"": ""MoveBody"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bfe4c92c-251b-4b03-a6cc-53eb7411fccb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""K&m"",
                    ""action"": ""MoveBody"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""eb746efe-8b62-46f8-a9ef-30c58da118a0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f9839fe-35a2-48a8-b0ae-ed034ad006f0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d2257cf-0449-49f7-98fc-18cca350fff0"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlatformBind"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08e7580a-e668-4e9d-b2f7-2c66275c0320"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CheckpointBind"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2488c3d8-3d9b-4205-8663-84a36209b8da"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd0a1938-8e8a-4efd-8617-af8db0d3688a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""K&m"",
            ""bindingGroup"": ""K&m"",
            ""devices"": []
        }
    ]
}");
        // PlayerGame
        m_PlayerGame = asset.FindActionMap("PlayerGame", throwIfNotFound: true);
        m_PlayerGame_MoveBody = m_PlayerGame.FindAction("MoveBody", throwIfNotFound: true);
        m_PlayerGame_MouseLook = m_PlayerGame.FindAction("MouseLook", throwIfNotFound: true);
        m_PlayerGame_Jump = m_PlayerGame.FindAction("Jump", throwIfNotFound: true);
        m_PlayerGame_CheckpointBind = m_PlayerGame.FindAction("CheckpointBind", throwIfNotFound: true);
        m_PlayerGame_PlatformBind = m_PlayerGame.FindAction("PlatformBind", throwIfNotFound: true);
        m_PlayerGame_Sprint = m_PlayerGame.FindAction("Sprint", throwIfNotFound: true);
        m_PlayerGame_Shoot = m_PlayerGame.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerGame
    private readonly InputActionMap m_PlayerGame;
    private IPlayerGameActions m_PlayerGameActionsCallbackInterface;
    private readonly InputAction m_PlayerGame_MoveBody;
    private readonly InputAction m_PlayerGame_MouseLook;
    private readonly InputAction m_PlayerGame_Jump;
    private readonly InputAction m_PlayerGame_CheckpointBind;
    private readonly InputAction m_PlayerGame_PlatformBind;
    private readonly InputAction m_PlayerGame_Sprint;
    private readonly InputAction m_PlayerGame_Shoot;
    public struct PlayerGameActions
    {
        private @Controls m_Wrapper;
        public PlayerGameActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveBody => m_Wrapper.m_PlayerGame_MoveBody;
        public InputAction @MouseLook => m_Wrapper.m_PlayerGame_MouseLook;
        public InputAction @Jump => m_Wrapper.m_PlayerGame_Jump;
        public InputAction @CheckpointBind => m_Wrapper.m_PlayerGame_CheckpointBind;
        public InputAction @PlatformBind => m_Wrapper.m_PlayerGame_PlatformBind;
        public InputAction @Sprint => m_Wrapper.m_PlayerGame_Sprint;
        public InputAction @Shoot => m_Wrapper.m_PlayerGame_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGameActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerGameActions instance)
        {
            if (m_Wrapper.m_PlayerGameActionsCallbackInterface != null)
            {
                @MoveBody.started -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnMoveBody;
                @MoveBody.performed -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnMoveBody;
                @MoveBody.canceled -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnMoveBody;
                @MouseLook.started -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnMouseLook;
                @MouseLook.performed -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnMouseLook;
                @MouseLook.canceled -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnMouseLook;
                @Jump.started -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnJump;
                @CheckpointBind.started -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnCheckpointBind;
                @CheckpointBind.performed -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnCheckpointBind;
                @CheckpointBind.canceled -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnCheckpointBind;
                @PlatformBind.started -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnPlatformBind;
                @PlatformBind.performed -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnPlatformBind;
                @PlatformBind.canceled -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnPlatformBind;
                @Sprint.started -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnSprint;
                @Shoot.started -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PlayerGameActionsCallbackInterface.OnShoot;
            }
            m_Wrapper.m_PlayerGameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveBody.started += instance.OnMoveBody;
                @MoveBody.performed += instance.OnMoveBody;
                @MoveBody.canceled += instance.OnMoveBody;
                @MouseLook.started += instance.OnMouseLook;
                @MouseLook.performed += instance.OnMouseLook;
                @MouseLook.canceled += instance.OnMouseLook;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @CheckpointBind.started += instance.OnCheckpointBind;
                @CheckpointBind.performed += instance.OnCheckpointBind;
                @CheckpointBind.canceled += instance.OnCheckpointBind;
                @PlatformBind.started += instance.OnPlatformBind;
                @PlatformBind.performed += instance.OnPlatformBind;
                @PlatformBind.canceled += instance.OnPlatformBind;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
            }
        }
    }
    public PlayerGameActions @PlayerGame => new PlayerGameActions(this);
    private int m_KmSchemeIndex = -1;
    public InputControlScheme KmScheme
    {
        get
        {
            if (m_KmSchemeIndex == -1) m_KmSchemeIndex = asset.FindControlSchemeIndex("K&m");
            return asset.controlSchemes[m_KmSchemeIndex];
        }
    }
    public interface IPlayerGameActions
    {
        void OnMoveBody(InputAction.CallbackContext context);
        void OnMouseLook(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnCheckpointBind(InputAction.CallbackContext context);
        void OnPlatformBind(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
